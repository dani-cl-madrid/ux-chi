{
  "timestamp": "2019-06-28T11:01:16",
  "compiler": {
    "name": "@stencil/core",
    "version": "0.16.4",
    "typescriptVersion": "3.2.2"
  },
  "components": [
    {
      "tag": "chi-badge",
      "encapsulation": "scoped",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set color of a badge.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "to render badges with a more pronounced border-radius.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of a badge { small or smaller }.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "textTransform",
          "type": "string",
          "mutable": false,
          "attr": "text-transform",
          "reflectToAttr": true,
          "docs": "to transform the badge text { uppercase, lowercase, capitalize }.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "to set variant of a badge { outline, flat }.",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": []
    },
    {
      "tag": "chi-brand",
      "encapsulation": "scoped",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of brand.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "to set brand type { black, white, inverse }.",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": []
    },
    {
      "tag": "chi-button",
      "encapsulation": "scoped",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "center",
          "type": "boolean",
          "mutable": false,
          "attr": "center",
          "reflectToAttr": true,
          "docs": "to center align the text .",
          "docsTags": [],
          "default": "false",
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set button color { primary, secondary, danger, dark, light }.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "to disable chi-button.",
          "docsTags": [],
          "default": "false",
          "optional": false,
          "required": false
        },
        {
          "name": "extraClass",
          "type": "string",
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "fluid",
          "type": "boolean",
          "mutable": false,
          "attr": "fluid",
          "reflectToAttr": true,
          "docs": "to render a button to fill the parent space.",
          "docsTags": [],
          "default": "false",
          "optional": false,
          "required": false
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "to to render buttons with a more pronounced border-radius.",
          "docsTags": [],
          "default": "false",
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set button size { sm, md, lg, xl }.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "to set button type { float, close, icon }.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "to set variant of a button { outline, flat }.",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "to emit a custom event when button is clicked.",
          "docsTags": []
        }
      ],
      "styles": []
    },
    {
      "tag": "chi-date-picker",
      "encapsulation": "scoped",
      "readme": "# chi-date-picker\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Indicates whether the dropdown calendar is open or closed",
          "docsTags": [],
          "default": "false",
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "string",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "Date format used in the attributes and how it will be shown to the user.",
          "docsTags": [],
          "default": "'MM/DD/YYYY'",
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": true,
          "docs": "Locale to use in date picker",
          "docsTags": [],
          "default": "'en'",
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Maximum eligible date",
          "docsTags": [],
          "default": "'12/31/2099'",
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Minimum eligible date",
          "docsTags": [],
          "default": "'01/01/1900'",
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Selected date in the date picker",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getDate",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "signature": "getDate() => Promise<string>",
          "parameters": [],
          "docs": "Gets date",
          "docsTags": []
        },
        {
          "name": "setDate",
          "returns": {
            "type": "void",
            "docs": ""
          },
          "signature": "setDate(date: any) => void",
          "parameters": [
            {
              "name": "date",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Sets date",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": []
    },
    {
      "tag": "chi-date",
      "encapsulation": "scoped",
      "readme": "# chi-date\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "format",
          "type": "string",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "Date format used in the attributes and how it will be shown to the user.",
          "docsTags": [],
          "default": "'MM/DD/YYYY'",
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": true,
          "docs": "Locale to use in date picker",
          "docsTags": [],
          "default": "'en'",
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Maximum eligible date",
          "docsTags": [],
          "default": "'12/31/2099'",
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Minimum eligible date",
          "docsTags": [],
          "default": "'01/01/1900'",
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Selected date in the date picker",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getDate",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "signature": "getDate() => Promise<string>",
          "parameters": [],
          "docs": "Gets date",
          "docsTags": []
        },
        {
          "name": "setDate",
          "returns": {
            "type": "void",
            "docs": ""
          },
          "signature": "setDate(date: any) => void",
          "parameters": [
            {
              "name": "date",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Sets date",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiDateChange",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Date change value event",
          "docsTags": []
        }
      ],
      "styles": []
    },
    {
      "tag": "chi-drawer",
      "encapsulation": "scoped",
      "readme": "# chi-drawer\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "to open or close the drawer",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "backdrop",
          "type": "string",
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": true,
          "docs": "to add a backdrop behind the drawer, which covers the viewport",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "collapsible",
          "type": "boolean",
          "mutable": false,
          "attr": "collapsible",
          "reflectToAttr": true,
          "docs": "adds a close button",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "headerTitle",
          "type": "string",
          "mutable": false,
          "attr": "header-title",
          "reflectToAttr": true,
          "docs": "header title. Not compatible with headless",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "headless",
          "type": "boolean",
          "mutable": false,
          "attr": "headless",
          "reflectToAttr": true,
          "docs": "to remove the space for the header",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "string",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "to set position of the drawer { top, right, bottom or left }",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "void",
            "docs": ""
          },
          "signature": "hide() => void",
          "parameters": [],
          "docs": "Hides the drawer",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "void",
            "docs": ""
          },
          "signature": "show() => void",
          "parameters": [],
          "docs": "Shows the drawer.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "void",
            "docs": ""
          },
          "signature": "toggle() => void",
          "parameters": [],
          "docs": "Toggles active state (show/hide)",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiDrawer:hidden",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Drawer has been hidden to the user. The animation has completed.",
          "docsTags": []
        },
        {
          "event": "chiDrawer:hide",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Drawer hide method has executed, but the closing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiDrawer:show",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Drawer show method has executed, but the showing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiDrawer:shown",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Drawer has been shown to the user and is fully visible. The animation has completed.",
          "docsTags": []
        }
      ],
      "styles": []
    },
    {
      "tag": "chi-icon",
      "encapsulation": "scoped",
      "readme": "# chi-icon\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Color of the icon. Accepts any color the text-utility supports {primary, success, warning, danger, inverse, muted}",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Icon to be rendered. View accepted values on text documentation.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Size of the Icon. {xs, sm, sm--2, sm--3, md, lg, xl, xxl}",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": []
    },
    {
      "tag": "chi-popover",
      "encapsulation": "scoped",
      "readme": "# chi-popover\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "to open or close the popover",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "arrow",
          "type": "boolean",
          "mutable": false,
          "attr": "arrow",
          "reflectToAttr": true,
          "docs": "to add an arrow between the popover and the reference element",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "to set position of the popover { top, top-start, top-end, right, right-start, right-end, bottom, bottom-start, bottom-end, left, left-start, left-end }",
          "docsTags": [],
          "default": "'top'",
          "optional": false,
          "required": false
        },
        {
          "name": "preventAutoHide",
          "type": "boolean",
          "mutable": false,
          "attr": "prevent-auto-hide",
          "reflectToAttr": true,
          "docs": "Prevents closing the popover when clicking out of its bounds",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "reference",
          "type": "string",
          "mutable": false,
          "attr": "reference",
          "reflectToAttr": true,
          "docs": "CSS Selector to the reference Element. I.e. #id > p",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "void",
            "docs": ""
          },
          "signature": "hide() => void",
          "parameters": [],
          "docs": "Hides the popover",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "void",
            "docs": ""
          },
          "signature": "show() => void",
          "parameters": [],
          "docs": "Shows the popover.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "void",
            "docs": ""
          },
          "signature": "toggle() => void",
          "parameters": [],
          "docs": "Toggles active state (show/hide)",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiPopover:hidden",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Popover has been hidden to the user. The animation has completed.",
          "docsTags": []
        },
        {
          "event": "chiPopover:hide",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Popover hide method has executed, but the closing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiPopover:show",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Popover show method has executed, but the showing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiPopover:shown",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Popover has been shown to the user and is fully visible. The animation has completed.",
          "docsTags": []
        }
      ],
      "styles": []
    },
    {
      "tag": "chi-spinner",
      "encapsulation": "scoped",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "backdrop",
          "type": "string",
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": true,
          "docs": "to render spinners on dark or light backgrounds.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set color of a spinner { primary, success, warning, danger, muted }.",
          "docsTags": [],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of a spinner { xs, sm, sm--2, sm--3, md, lg, xl, xxl }.",
          "docsTags": [],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": []
    }
  ]
}